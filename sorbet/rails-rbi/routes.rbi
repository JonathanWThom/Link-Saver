# typed: strong
# This is an autogenerated file for Rails routes.
# Please run rake rails_rbi:routes to regenerate.
class ActionController::Base
  include GeneratedUrlHelpers
end

module ActionView::Helpers
  include GeneratedUrlHelpers
end

module GeneratedUrlHelpers
  # Sigs for route /
  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def root_path(*args, **kwargs); end

  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def root_url(*args, **kwargs); end

  # Sigs for route /links(.:format)
  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def links_path(*args, **kwargs); end

  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def links_url(*args, **kwargs); end

  # Sigs for route /links/:id(.:format)
  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def link_path(*args, **kwargs); end

  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def link_url(*args, **kwargs); end

  # Sigs for route /featured(.:format)
  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def featured_path(*args, **kwargs); end

  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def featured_url(*args, **kwargs); end

  # Sigs for route /delete_links(.:format)
  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def delete_links_path(*args, **kwargs); end

  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def delete_links_url(*args, **kwargs); end

  # Sigs for route /favorite_links(.:format)
  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def favorite_links_path(*args, **kwargs); end

  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def favorite_links_url(*args, **kwargs); end

  # Sigs for route /favorite_links/:id(.:format)
  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def favorite_link_path(*args, **kwargs); end

  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def favorite_link_url(*args, **kwargs); end

  # Sigs for route /tags(.:format)
  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def tags_path(*args, **kwargs); end

  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def tags_url(*args, **kwargs); end

  # Sigs for route /tags/:id(.:format)
  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def tag_path(*args, **kwargs); end

  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def tag_url(*args, **kwargs); end

  # Sigs for route /categories(.:format)
  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def categories_path(*args, **kwargs); end

  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def categories_url(*args, **kwargs); end

  # Sigs for route /auth/login(.:format)
  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def auth_login_path(*args, **kwargs); end

  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def auth_login_url(*args, **kwargs); end

  # Sigs for route /link_searches(.:format)
  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def link_searches_path(*args, **kwargs); end

  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def link_searches_url(*args, **kwargs); end

  # Sigs for route /users/:user_id(.:format)
  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def user_links_path(*args, **kwargs); end

  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def user_links_url(*args, **kwargs); end

  # Sigs for route /users/:user_id/settings(.:format)
  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def user_settings_path(*args, **kwargs); end

  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def user_settings_url(*args, **kwargs); end

  # Sigs for route /users/:id(.:format)
  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def user_path(*args, **kwargs); end

  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def user_url(*args, **kwargs); end

  # Sigs for route /color_modes(.:format)
  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def color_modes_path(*args, **kwargs); end

  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def color_modes_url(*args, **kwargs); end

  # Sigs for route /about(.:format)
  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def about_path(*args, **kwargs); end

  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def about_url(*args, **kwargs); end

  # Sigs for route /pages/*id
  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def page_path(*args, **kwargs); end

  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def page_url(*args, **kwargs); end

  # Sigs for route /passwords(.:format)
  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def passwords_path(*args, **kwargs); end

  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def passwords_url(*args, **kwargs); end

  # Sigs for route /passwords/new(.:format)
  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def new_password_path(*args, **kwargs); end

  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def new_password_url(*args, **kwargs); end

  # Sigs for route /session(.:format)
  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def session_path(*args, **kwargs); end

  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def session_url(*args, **kwargs); end

  # Sigs for route /users/:user_id/password/edit(.:format)
  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def edit_user_password_path(*args, **kwargs); end

  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def edit_user_password_url(*args, **kwargs); end

  # Sigs for route /users/:user_id/password(.:format)
  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def user_password_path(*args, **kwargs); end

  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def user_password_url(*args, **kwargs); end

  # Sigs for route /users(.:format)
  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def users_path(*args, **kwargs); end

  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def users_url(*args, **kwargs); end

  # Sigs for route /sign_in(.:format)
  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def sign_in_path(*args, **kwargs); end

  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def sign_in_url(*args, **kwargs); end

  # Sigs for route /sign_out(.:format)
  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def sign_out_path(*args, **kwargs); end

  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def sign_out_url(*args, **kwargs); end

  # Sigs for route /sign_up(.:format)
  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def sign_up_path(*args, **kwargs); end

  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def sign_up_url(*args, **kwargs); end

  # Sigs for route /rails/active_storage/blobs/:signed_id/*filename(.:format)
  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def rails_service_blob_path(*args, **kwargs); end

  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def rails_service_blob_url(*args, **kwargs); end

  # Sigs for route /rails/active_storage/representations/:signed_blob_id/:variation_key/*filename(.:format)
  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def rails_blob_representation_path(*args, **kwargs); end

  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def rails_blob_representation_url(*args, **kwargs); end

  # Sigs for route /rails/active_storage/disk/:encoded_key/*filename(.:format)
  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def rails_disk_service_path(*args, **kwargs); end

  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def rails_disk_service_url(*args, **kwargs); end

  # Sigs for route /rails/active_storage/disk/:encoded_token(.:format)
  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def update_rails_disk_service_path(*args, **kwargs); end

  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def update_rails_disk_service_url(*args, **kwargs); end

  # Sigs for route /rails/active_storage/direct_uploads(.:format)
  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def rails_direct_uploads_path(*args, **kwargs); end

  sig { params(args: T.untyped, kwargs: T.untyped).returns(String) }
  def rails_direct_uploads_url(*args, **kwargs); end
end

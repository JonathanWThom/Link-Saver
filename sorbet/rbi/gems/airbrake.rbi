# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/airbrake/all/airbrake.rbi
#
# airbrake-9.5.0
module Airbrake
end
module Airbrake::Rack
  def self.capture_timing(label); end
end
class Airbrake::Rack::User
  def as_json; end
  def full_name; end
  def initialize(user); end
  def self.extract(rack_env); end
  def self.try_current_user(rack_env); end
  def try_to_get(key); end
end
class Airbrake::Rack::UserFilter
  def call(notice); end
  def initialize; end
  def weight; end
end
class Airbrake::Rack::ContextFilter
  def add_framework_version(context); end
  def call(notice); end
  def framework_version; end
  def initialize; end
  def weight; end
end
class Airbrake::Rack::SessionFilter
  def call(notice); end
  def initialize; end
  def weight; end
end
class Airbrake::Rack::HttpParamsFilter
  def call(notice); end
  def initialize; end
  def weight; end
end
class Airbrake::Rack::HttpHeadersFilter
  def call(notice); end
  def initialize; end
  def weight; end
end
class Airbrake::Rack::RequestBodyFilter
  def call(notice); end
  def initialize(length = nil); end
  def weight; end
end
class Airbrake::Rack::RouteFilter
  def action_dispatch_request?(request); end
  def call(notice); end
  def initialize; end
  def rails_route(request); end
  def sinatra_request?(request); end
  def sinatra_route(request); end
  def weight; end
end
class Airbrake::Rack::Middleware
  def before_call(env); end
  def call!(env); end
  def call(env); end
  def find_request(env); end
  def framework_exception(env); end
  def initialize(app); end
  def notify_airbrake(exception); end
end
module Airbrake::Rack::RequestStore
  def self.[](key); end
  def self.[]=(key, value); end
  def self.clear; end
  def self.store; end
end
module Airbrake::Rack::Instrumentable
  def airbrake_capture_timing(method_name, label: nil); end
end
module Airbrake::Rails
  def self.logger; end
end
class Airbrake::Rails::Railtie < Rails::Railtie
end
module Airbrake::Rails::ActionController
  def build_notice(exception, params = nil); end
  def notify_airbrake(exception, params = nil, &block); end
  def notify_airbrake_sync(exception, params = nil, &block); end
end
module ActionController
end
class ActionController::Metal < AbstractController::Base
  include Airbrake::Rails::ActionController
end
class Airbrake::AirbrakeLogger < SimpleDelegator
  def airbrake_level; end
  def airbrake_level=(level); end
  def airbrake_notifier; end
  def airbrake_notifier=(arg0); end
  def error(progname = nil, &block); end
  def fatal(progname = nil, &block); end
  def initialize(logger); end
  def level=(value); end
  def normalize_severity(severity); end
  def notify_airbrake(severity, progname); end
  def unknown(progname = nil, &block); end
  def warn(progname = nil, &block); end
end
module Airbrake::Rails::ActiveRecord
  def run_callbacks(kind, *args, &block); end
end
class Airbrake::Rails::Event
  def db_runtime; end
  def duration; end
  def end; end
  def groups; end
  def initialize(*args); end
  def method; end
  def params; end
  def response_type; end
  def sql; end
  def status_code; end
  def time; end
  def view_runtime; end
  include Airbrake::Loggable
end
class Airbrake::Rails::BacktraceCleaner
  def self.clean(backtrace); end
end
class Airbrake::Rails::ActiveRecordSubscriber
  def call(*args); end
  def last_caller; end
end
module Airbrake::Rails::ActiveJob
  def self.notify_airbrake(exception, job); end
  extend ActiveSupport::Concern
end
module Airbrake::Rails::ActionCable
end
class Airbrake::Rails::ActionCable::NotifyCallback
  def self.call(channel, block); end
end
module ActionCable
end
module ActionCable::Channel
end
class ActionCable::Channel::Base
  def perform_action_without_airbrake(data); end
end
class Airbrake::Rails::App
  def app_routes; end
  def build_route(engine_name, rails_route); end
  def engine_routes; end
  def routes; end
end
class Airbrake::Rails::App::Route < Struct
  def action; end
  def action=(_); end
  def controller; end
  def controller=(_); end
  def path; end
  def path=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class Airbrake::Rails::ActionControllerRouteSubscriber
  def call(*args); end
  def find_route(params); end
  def initialize; end
end
class Airbrake::Rails::ActionControllerNotifySubscriber
  def call(*args); end
end
class Airbrake::Rails::ActionControllerPerformanceBreakdownSubscriber
  def build_stash; end
  def call(*args); end
end
class Net::HTTP < Net::Protocol
  def request_without_airbrake(req, body = nil, &block); end
end

# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/capybara-webkit/all/capybara-webkit.rbi
#
# capybara-webkit-1.15.1
module Capybara
end
module Capybara::Driver
end
class Capybara::Driver::Webkit
end
module Capybara::Webkit
  def self.configure(&block); end
end
class Capybara::Webkit::Node < Capybara::Driver::Node
  def ==(other); end
  def [](name); end
  def all_text; end
  def allow_unattached_nodes?; end
  def attached?; end
  def automatic_reload?; end
  def checked?; end
  def click(keys = nil, offset = nil); end
  def convert_to_named_keys(key); end
  def disabled?; end
  def double_click(keys = nil, offset = nil); end
  def drag_to(element); end
  def find(xpath); end
  def find_css(selector); end
  def find_xpath(xpath); end
  def hover; end
  def initialize(driver, base, browser); end
  def inner_html; end
  def inner_html=(value); end
  def invoke(name, *args); end
  def multiple_select?; end
  def path; end
  def right_click(keys = nil, offset = nil); end
  def select_option; end
  def selected?; end
  def send_keys(*keys); end
  def session_option(name); end
  def set(value, options = nil); end
  def submit(opts = nil); end
  def tag_name; end
  def text; end
  def trigger(event); end
  def unselect_option; end
  def value; end
  def visible?; end
  def visible_text; end
end
class Capybara::Webkit::Connection
  def attempt_connect; end
  def connect; end
  def gets; end
  def initialize(options = nil); end
  def pid; end
  def port; end
  def print(string); end
  def puts(string); end
  def read(length); end
  def restart; end
  def start_server; end
end
class Capybara::Webkit::InvalidResponseError < StandardError
end
class Capybara::Webkit::NoResponseError < StandardError
end
class Capybara::Webkit::NodeNotAttachedError < Capybara::ElementNotFound
end
class Capybara::Webkit::ClickFailed < StandardError
end
class Capybara::Webkit::TimeoutError < Timeout::Error
end
class Capybara::Webkit::NoSuchWindowError < StandardError
end
class Capybara::Webkit::ConnectionError < StandardError
end
class Capybara::Webkit::ModalNotFound < StandardError
end
class Capybara::Webkit::CrashError < StandardError
end
class Capybara::Webkit::JsonError
  def error_class; end
  def exception; end
  def initialize(response); end
end
class Capybara::Webkit::JavaScriptError < StandardError
  def initialize(errors); end
  def javascript_errors; end
end
class Capybara::Webkit::Browser
  def accept_alert(options); end
  def accept_confirm(options); end
  def accept_js_confirms; end
  def accept_js_prompts; end
  def accept_prompt(options); end
  def alert_messages; end
  def allow_unknown_urls; end
  def allow_url(url); end
  def apply_defaults; end
  def authenticate(username, password); end
  def block_unknown_urls; end
  def block_url(url); end
  def body; end
  def check; end
  def check_javascript_errors(command_name); end
  def clear_cookies; end
  def clear_prompt_text; end
  def clear_proxy; end
  def command(name, *args); end
  def confirm_messages; end
  def console_messages; end
  def current_url; end
  def default_proxy_options; end
  def enable_logging; end
  def error_messages; end
  def evaluate_async_script(script, *args); end
  def evaluate_script(script, *args); end
  def execute_script(script, *args); end
  def find_css(query); end
  def find_modal(id); end
  def find_xpath(query); end
  def frame_focus(selector = nil); end
  def get_cookies; end
  def get_window_handle; end
  def get_window_handles; end
  def go_back; end
  def go_forward; end
  def header(key, value); end
  def ignore_ssl_errors; end
  def initialize(connection); end
  def prompt_messages; end
  def raise_javascript_errors?; end
  def read_response; end
  def refresh; end
  def reject_confirm(options); end
  def reject_js_confirms; end
  def reject_js_prompts; end
  def reject_prompt(options); end
  def render(path, width, height); end
  def reset!; end
  def response_headers; end
  def set_cookie(cookie); end
  def set_prompt_text_to(string); end
  def set_proxy(options = nil); end
  def set_raise_javascript_errors(is_enabled); end
  def set_skip_image_loading(skip_image_loading); end
  def status_code; end
  def timeout; end
  def timeout=(timeout_in_seconds); end
  def title; end
  def url_blacklist=(black_list); end
  def version; end
  def visit(url); end
  def window_close(selector); end
  def window_focus(selector); end
  def window_handle; end
  def window_handles; end
  def window_maximize(handle); end
  def window_open; end
  def window_resize(handle, width, height); end
  def window_size(handle); end
end
class Capybara::Webkit::CookieJar
  def [](*args); end
  def browser; end
  def cookies; end
  def ends_with?(str, suffix); end
  def find(name, domain = nil, path = nil); end
  def initialize(browser); end
  def normalize_domain(domain); end
  def starts_with?(str, prefix); end
  def valid_domain?(cookie, domain); end
  def valid_path?(cookie, path); end
end
class Capybara::Webkit::Server
  def discover_pid; end
  def discover_port; end
  def forward_output_in_background_thread; end
  def initialize(options = nil); end
  def kill_process; end
  def open_pipe; end
  def parse_port(line); end
  def pid; end
  def port; end
  def register_shutdown_hook; end
  def start; end
end
class Capybara::Webkit::Driver < Capybara::Driver::Base
  def accept_js_confirms!; end
  def accept_js_prompts!; end
  def accept_modal(type, options = nil); end
  def alert_messages; end
  def allow_unknown_urls; end
  def allow_url(url); end
  def apply_options; end
  def authenticate(username, password); end
  def block_unknown_urls; end
  def block_url(url); end
  def browser; end
  def clear_cookies; end
  def close_window(selector); end
  def confirm_messages; end
  def console_messages; end
  def cookies; end
  def current_url; end
  def current_window_handle; end
  def decode_result(result); end
  def default_wait_time; end
  def deprecate_and_replace_with_config(deprecated_method, config_syntax = nil); end
  def dismiss_js_confirms!; end
  def dismiss_js_prompts!; end
  def dismiss_modal(type, options = nil); end
  def enable_logging; end
  def encode_args(args); end
  def error_messages; end
  def evaluate_async_script(script, *args); end
  def evaluate_script(script, *args); end
  def execute_script(script, *args); end
  def find(xpath); end
  def find_css(selector); end
  def find_modal(type, id, options); end
  def find_xpath(xpath); end
  def go_back; end
  def go_forward; end
  def has_shortcircuit_timeout?; end
  def header(key, value); end
  def html; end
  def initialize(app, options = nil); end
  def invalid_element_errors; end
  def js_prompt_input=(value); end
  def maximize_window(selector); end
  def modal_action_options_for_browser(options); end
  def needs_server?; end
  def no_such_window_error; end
  def open_new_window; end
  def prompt_messages; end
  def refresh; end
  def reset!; end
  def resize_window(width, height); end
  def resize_window_to(handle, width, height); end
  def response_headers; end
  def save_screenshot(path, options = nil); end
  def set_cookie(cookie); end
  def status_code; end
  def switch_to_frame(frame); end
  def switch_to_window(selector); end
  def timeout; end
  def timeout=(timeout); end
  def title; end
  def version; end
  def visit(path); end
  def wait?; end
  def window_handles; end
  def window_size(handle); end
  def within_frame(selector); end
  def within_window(selector); end
end
class Capybara::Webkit::Configuration
  def allow_unknown_urls; end
  def allow_url(url); end
  def allowed_urls; end
  def allowed_urls=(arg0); end
  def block_unknown_urls; end
  def block_unknown_urls=(arg0); end
  def block_unknown_urls?; end
  def block_url(url); end
  def blocked_urls; end
  def blocked_urls=(arg0); end
  def debug; end
  def debug=(arg0); end
  def ignore_ssl_errors; end
  def ignore_ssl_errors=(arg0); end
  def ignore_ssl_errors?; end
  def initialize; end
  def proxy; end
  def proxy=(arg0); end
  def raise_javascript_errors; end
  def raise_javascript_errors=(arg0); end
  def self.instance; end
  def self.modify; end
  def self.to_hash; end
  def skip_image_loading; end
  def skip_image_loading=(arg0); end
  def skip_image_loading?; end
  def stderr; end
  def stderr=(arg0); end
  def timeout; end
  def timeout=(arg0); end
  def to_hash; end
  def use_proxy(proxy); end
end
